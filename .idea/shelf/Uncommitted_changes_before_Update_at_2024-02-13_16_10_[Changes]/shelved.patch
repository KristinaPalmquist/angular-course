Index: 20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.ts b/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.ts
new file mode 100644
--- /dev/null	(date 1707811334201)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.ts	(date 1707811334201)
@@ -0,0 +1,15 @@
+import { Component, OnInit } from '@angular/core';
+
+@Component({
+  selector: 'app-recipe-start',
+  templateUrl: './recipe-start.component.html',
+  styleUrls: ['./recipe-start.component.css']
+})
+export class RecipeStartComponent implements OnInit {
+
+  constructor() { }
+
+  ngOnInit() {
+  }
+
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.html b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.html
new file mode 100644
--- /dev/null	(date 1707811334663)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.html	(date 1707811334663)
@@ -0,0 +1,15 @@
+<div class="row">
+  <div class="col-xs-12">
+    <button class="btn btn-success" (click)="onNewRecipe()">New Recipe</button>
+  </div>
+</div>
+<hr>
+<div class="row">
+  <div class="col-xs-12">
+    <app-recipe-item
+      *ngFor="let recipeEl of recipes; let i = index"
+      [recipe]="recipeEl"
+      [index]="i"></app-recipe-item>
+  </div>
+</div>
+
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.html b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.html
new file mode 100644
--- /dev/null	(date 1707811335001)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.html	(date 1707811335001)
@@ -0,0 +1,17 @@
+<a
+  style="cursor: pointer;"
+  [routerLink]="[index]"
+  routerLinkActive="active"
+  class="list-group-item clearfix">
+  <div class="pull-left">
+    <h4 class="list-group-item-heading">{{ recipe.name }}</h4>
+    <p class="list-group-item-text">{{ recipe.description }}</p>
+  </div>
+  <span class="pull-right">
+        <img
+          [src]="recipe.imagePath"
+          alt="{{ recipe.name }}"
+          class="img-responsive"
+          style="max-height: 50px;">
+      </span>
+</a>
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.ts b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.ts
new file mode 100644
--- /dev/null	(date 1707811334575)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.ts	(date 1707811334575)
@@ -0,0 +1,39 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { Router, ActivatedRoute } from '@angular/router';
+import { Subscription } from 'rxjs';
+
+import { Recipe } from '../recipe.model';
+import { RecipeService } from '../recipe.service';
+
+@Component({
+  selector: 'app-recipe-list',
+  templateUrl: './recipe-list.component.html',
+  styleUrls: ['./recipe-list.component.css']
+})
+export class RecipeListComponent implements OnInit, OnDestroy {
+  recipes: Recipe[];
+  subscription: Subscription;
+
+  constructor(private recipeService: RecipeService,
+              private router: Router,
+              private route: ActivatedRoute) {
+  }
+
+  ngOnInit() {
+    this.subscription = this.recipeService.recipesChanged
+      .subscribe(
+        (recipes: Recipe[]) => {
+          this.recipes = recipes;
+        }
+      );
+    this.recipes = this.recipeService.getRecipes();
+  }
+
+  onNewRecipe() {
+    this.router.navigate(['new'], {relativeTo: this.route});
+  }
+
+  ngOnDestroy() {
+    this.subscription.unsubscribe();
+  }
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.ts b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.ts
new file mode 100644
--- /dev/null	(date 1707811334820)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.ts	(date 1707811334820)
@@ -0,0 +1,16 @@
+import { Component, OnInit, Input } from '@angular/core';
+
+import { Recipe } from '../../recipe.model';
+
+@Component({
+  selector: 'app-recipe-item',
+  templateUrl: './recipe-item.component.html',
+  styleUrls: ['./recipe-item.component.css']
+})
+export class RecipeItemComponent implements OnInit {
+  @Input() recipe: Recipe;
+  @Input() index: number;
+
+  ngOnInit() {
+  }
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe.model.ts b/20.-auth-01-auth-component/src/app/recipes/recipe.model.ts
new file mode 100644
--- /dev/null	(date 1707811333674)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe.model.ts	(date 1707811333674)
@@ -0,0 +1,15 @@
+import { Ingredient } from '../shared/ingredient.model';
+
+export class Recipe {
+  public name: string;
+  public description: string;
+  public imagePath: string;
+  public ingredients: Ingredient[];
+
+  constructor(name: string, desc: string, imagePath: string, ingredients: Ingredient[]) {
+    this.name = name;
+    this.description = desc;
+    this.imagePath = imagePath;
+    this.ingredients = ingredients;
+  }
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe.service.ts b/20.-auth-01-auth-component/src/app/recipes/recipe.service.ts
new file mode 100644
--- /dev/null	(date 1707811333921)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe.service.ts	(date 1707811333921)
@@ -0,0 +1,61 @@
+import { Injectable } from '@angular/core';
+import { Subject } from 'rxjs';
+
+import { Recipe } from './recipe.model';
+import { Ingredient } from '../shared/ingredient.model';
+import { ShoppingListService } from '../shopping-list/shopping-list.service';
+
+@Injectable()
+export class RecipeService {
+  recipesChanged = new Subject<Recipe[]>();
+
+  // private recipes: Recipe[] = [
+  //   new Recipe(
+  //     'Tasty Schnitzel',
+  //     'A super-tasty Schnitzel - just awesome!',
+  //     'https://upload.wikimedia.org/wikipedia/commons/7/72/Schnitzel.JPG',
+  //     [new Ingredient('Meat', 1), new Ingredient('French Fries', 20)]
+  //   ),
+  //   new Recipe(
+  //     'Big Fat Burger',
+  //     'What else you need to say?',
+  //     'https://upload.wikimedia.org/wikipedia/commons/b/be/Burger_King_Angus_Bacon_%26_Cheese_Steak_Burger.jpg',
+  //     [new Ingredient('Buns', 2), new Ingredient('Meat', 1)]
+  //   )
+  // ];
+  private recipes: Recipe[] = [];
+
+  constructor(private slService: ShoppingListService) {}
+
+  setRecipes(recipes: Recipe[]) {
+    this.recipes = recipes;
+    this.recipesChanged.next(this.recipes.slice());
+  }
+
+  getRecipes() {
+    return this.recipes.slice();
+  }
+
+  getRecipe(index: number) {
+    return this.recipes[index];
+  }
+
+  addIngredientsToShoppingList(ingredients: Ingredient[]) {
+    this.slService.addIngredients(ingredients);
+  }
+
+  addRecipe(recipe: Recipe) {
+    this.recipes.push(recipe);
+    this.recipesChanged.next(this.recipes.slice());
+  }
+
+  updateRecipe(index: number, newRecipe: Recipe) {
+    this.recipes[index] = newRecipe;
+    this.recipesChanged.next(this.recipes.slice());
+  }
+
+  deleteRecipe(index: number) {
+    this.recipes.splice(index, 1);
+    this.recipesChanged.next(this.recipes.slice());
+  }
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.html b/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.html
new file mode 100644
--- /dev/null	(date 1707811335222)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.html	(date 1707811335222)
@@ -0,0 +1,48 @@
+<div class="row">
+  <div class="col-xs-12">
+    <img
+      [src]="recipe.imagePath"
+      alt="{{ recipe.name }}"
+      class="img-responsive"
+      style="max-height: 300px;">
+  </div>
+</div>
+<div class="row">
+  <div class="col-xs-12">
+    <h1>{{ recipe.name }}</h1>
+  </div>
+</div>
+<div class="row">
+  <div class="col-xs-12">
+    <div
+      class="btn-group"
+      appDropdown>
+      <button
+        type="button"
+        class="btn btn-primary dropdown-toggle">
+        Manage Recipe <span class="caret"></span>
+      </button>
+      <ul class="dropdown-menu">
+        <li><a (click)="onAddToShoppingList()" style="cursor: pointer;">To Shopping List</a></li>
+        <li><a style="cursor: pointer;" (click)="onEditRecipe()">Edit Recipe</a></li>
+        <li><a style="cursor: pointer;" (click)="onDeleteRecipe()">Delete Recipe</a></li>
+      </ul>
+    </div>
+  </div>
+</div>
+<div class="row">
+  <div class="col-xs-12">
+    {{ recipe.description }}
+  </div>
+</div>
+<div class="row">
+  <div class="col-xs-12">
+    <ul class="list-group">
+      <li
+        class="list-group-item"
+        *ngFor="let ingredient of recipe.ingredients">
+        {{ ingredient.name }} - {{ ingredient.amount }}
+      </li>
+    </ul>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.ts b/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.ts
new file mode 100644
--- /dev/null	(date 1707811335299)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.ts	(date 1707811335299)
@@ -0,0 +1,45 @@
+import { Component, OnInit } from '@angular/core';
+import { ActivatedRoute, Params, Router } from '@angular/router';
+
+import { Recipe } from '../recipe.model';
+import { RecipeService } from '../recipe.service';
+
+@Component({
+  selector: 'app-recipe-detail',
+  templateUrl: './recipe-detail.component.html',
+  styleUrls: ['./recipe-detail.component.css']
+})
+export class RecipeDetailComponent implements OnInit {
+  recipe: Recipe;
+  id: number;
+
+  constructor(private recipeService: RecipeService,
+              private route: ActivatedRoute,
+              private router: Router) {
+  }
+
+  ngOnInit() {
+    this.route.params
+      .subscribe(
+        (params: Params) => {
+          this.id = +params['id'];
+          this.recipe = this.recipeService.getRecipe(this.id);
+        }
+      );
+  }
+
+  onAddToShoppingList() {
+    this.recipeService.addIngredientsToShoppingList(this.recipe.ingredients);
+  }
+
+  onEditRecipe() {
+    this.router.navigate(['edit'], {relativeTo: this.route});
+    // this.router.navigate(['../', this.id, 'edit'], {relativeTo: this.route});
+  }
+
+  onDeleteRecipe() {
+    this.recipeService.deleteRecipe(this.id);
+    this.router.navigate(['/recipes']);
+  }
+
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.html b/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.html
new file mode 100644
--- /dev/null	(date 1707811334119)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.html	(date 1707811334119)
@@ -0,0 +1,1 @@
+<h3>Please select a Recipe!</h3>
Index: 20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.ts b/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.ts
new file mode 100644
--- /dev/null	(date 1707811333379)
+++ b/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.ts	(date 1707811333379)
@@ -0,0 +1,68 @@
+import {
+  Component,
+  OnInit,
+  OnDestroy,
+  ViewChild
+} from '@angular/core';
+import { NgForm } from '@angular/forms';
+import { Subscription } from 'rxjs';
+
+import { Ingredient } from '../../shared/ingredient.model';
+import { ShoppingListService } from '../shopping-list.service';
+
+@Component({
+  selector: 'app-shopping-edit',
+  templateUrl: './shopping-edit.component.html',
+  styleUrls: ['./shopping-edit.component.css']
+})
+export class ShoppingEditComponent implements OnInit, OnDestroy {
+  @ViewChild('f', { static: false }) slForm: NgForm;
+  subscription: Subscription;
+  editMode = false;
+  editedItemIndex: number;
+  editedItem: Ingredient;
+
+  constructor(private slService: ShoppingListService) { }
+
+  ngOnInit() {
+    this.subscription = this.slService.startedEditing
+      .subscribe(
+        (index: number) => {
+          this.editedItemIndex = index;
+          this.editMode = true;
+          this.editedItem = this.slService.getIngredient(index);
+          this.slForm.setValue({
+            name: this.editedItem.name,
+            amount: this.editedItem.amount
+          })
+        }
+      );
+  }
+
+  onSubmit(form: NgForm) {
+    const value = form.value;
+    const newIngredient = new Ingredient(value.name, value.amount);
+    if (this.editMode) {
+      this.slService.updateIngredient(this.editedItemIndex, newIngredient);
+    } else {
+      this.slService.addIngredient(newIngredient);
+    }
+    this.editMode = false;
+    form.reset();
+  }
+
+  onClear() {
+    this.slForm.reset();
+    this.editMode = false;
+  }
+
+  onDelete() {
+    this.slService.deleteIngredient(this.editedItemIndex);
+    this.onClear();
+  }
+
+  ngOnDestroy() {
+    this.subscription.unsubscribe();
+  }
+
+}
Index: 20.-auth-01-auth-component/src/app/app.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/app.module.ts b/20.-auth-01-auth-component/src/app/app.module.ts
new file mode 100644
--- /dev/null	(date 1707811332110)
+++ b/20.-auth-01-auth-component/src/app/app.module.ts	(date 1707811332110)
@@ -0,0 +1,47 @@
+import { BrowserModule } from '@angular/platform-browser';
+import { NgModule } from '@angular/core';
+import { FormsModule, ReactiveFormsModule } from '@angular/forms';
+import { HttpClientModule } from '@angular/common/http';
+
+import { AppComponent } from './app.component';
+import { HeaderComponent } from './header/header.component';
+import { RecipesComponent } from './recipes/recipes.component';
+import { RecipeListComponent } from './recipes/recipe-list/recipe-list.component';
+import { RecipeDetailComponent } from './recipes/recipe-detail/recipe-detail.component';
+import { RecipeItemComponent } from './recipes/recipe-list/recipe-item/recipe-item.component';
+import { ShoppingListComponent } from './shopping-list/shopping-list.component';
+import { ShoppingEditComponent } from './shopping-list/shopping-edit/shopping-edit.component';
+import { DropdownDirective } from './shared/dropdown.directive';
+import { ShoppingListService } from './shopping-list/shopping-list.service';
+import { AppRoutingModule } from './app-routing.module';
+import { RecipeStartComponent } from './recipes/recipe-start/recipe-start.component';
+import { RecipeEditComponent } from './recipes/recipe-edit/recipe-edit.component';
+import { RecipeService } from './recipes/recipe.service';
+import { AuthComponent } from './auth/auth.component';
+
+@NgModule({
+  declarations: [
+    AppComponent,
+    HeaderComponent,
+    RecipesComponent,
+    RecipeListComponent,
+    RecipeDetailComponent,
+    RecipeItemComponent,
+    ShoppingListComponent,
+    ShoppingEditComponent,
+    DropdownDirective,
+    RecipeStartComponent,
+    RecipeEditComponent,
+    AuthComponent
+  ],
+  imports: [
+    BrowserModule,
+    FormsModule,
+    ReactiveFormsModule,
+    HttpClientModule,
+    AppRoutingModule
+  ],
+  providers: [ShoppingListService, RecipeService],
+  bootstrap: [AppComponent]
+})
+export class AppModule {}
Index: 20.-auth-01-auth-component/src/app/recipes/recipes.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipes.component.html b/20.-auth-01-auth-component/src/app/recipes/recipes.component.html
new file mode 100644
--- /dev/null	(date 1707811333842)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipes.component.html	(date 1707811333842)
@@ -0,0 +1,8 @@
+<div class="row">
+  <div class="col-md-5">
+    <app-recipe-list></app-recipe-list>
+  </div>
+  <div class="col-md-7">
+    <router-outlet></router-outlet>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/app/recipes/recipes-resolver.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipes-resolver.service.ts b/20.-auth-01-auth-component/src/app/recipes/recipes-resolver.service.ts
new file mode 100644
--- /dev/null	(date 1707811333595)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipes-resolver.service.ts	(date 1707811333595)
@@ -0,0 +1,28 @@
+import { Injectable } from '@angular/core';
+import {
+  Resolve,
+  ActivatedRouteSnapshot,
+  RouterStateSnapshot
+} from '@angular/router';
+
+import { Recipe } from './recipe.model';
+import { DataStorageService } from '../shared/data-storage.service';
+import { RecipeService } from './recipe.service';
+
+@Injectable({ providedIn: 'root' })
+export class RecipesResolverService implements Resolve<Recipe[]> {
+  constructor(
+    private dataStorageService: DataStorageService,
+    private recipesService: RecipeService
+  ) {}
+
+  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
+    const recipes = this.recipesService.getRecipes();
+
+    if (recipes.length === 0) {
+      return this.dataStorageService.fetchRecipes();
+    } else {
+      return recipes;
+    }
+  }
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipes.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipes.component.ts b/20.-auth-01-auth-component/src/app/recipes/recipes.component.ts
new file mode 100644
--- /dev/null	(date 1707811333751)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipes.component.ts	(date 1707811333751)
@@ -0,0 +1,15 @@
+import { Component, OnInit } from '@angular/core';
+
+@Component({
+  selector: 'app-recipes',
+  templateUrl: './recipes.component.html',
+  styleUrls: ['./recipes.component.css']
+})
+export class RecipesComponent implements OnInit {
+
+  constructor() { }
+
+  ngOnInit() {
+  }
+
+}
Index: 20.-auth-01-auth-component/src/app/app.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/app.component.ts b/20.-auth-01-auth-component/src/app/app.component.ts
new file mode 100644
--- /dev/null	(date 1707811332188)
+++ b/20.-auth-01-auth-component/src/app/app.component.ts	(date 1707811332188)
@@ -0,0 +1,14 @@
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'app-root',
+  templateUrl: './app.component.html',
+  styleUrls: ['./app.component.css']
+})
+export class AppComponent {
+  loadedFeature = 'recipe';
+
+  onNavigate(feature: string) {
+    this.loadedFeature = feature;
+  }
+}
Index: 20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.html b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.html
new file mode 100644
--- /dev/null	(date 1707811333018)
+++ b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.html	(date 1707811333018)
@@ -0,0 +1,16 @@
+<div class="row">
+  <div class="col-xs-10">
+    <app-shopping-edit></app-shopping-edit>
+    <hr>
+    <ul class="list-group">
+      <a
+        class="list-group-item"
+        style="cursor: pointer"
+        *ngFor="let ingredient of ingredients; let i = index"
+        (click)="onEditItem(i)"
+      >
+        {{ ingredient.name }} ({{ ingredient.amount }})
+      </a>
+    </ul>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/app/shopping-list/shopping-list.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.service.ts b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.service.ts
new file mode 100644
--- /dev/null	(date 1707811332928)
+++ b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.service.ts	(date 1707811332928)
@@ -0,0 +1,42 @@
+import { Ingredient } from '../shared/ingredient.model';
+import { Subject } from 'rxjs';
+
+export class ShoppingListService {
+  ingredientsChanged = new Subject<Ingredient[]>();
+  startedEditing = new Subject<number>();
+  private ingredients: Ingredient[] = [
+    new Ingredient('Apples', 5),
+    new Ingredient('Tomatoes', 10),
+  ];
+
+  getIngredients() {
+    return this.ingredients.slice();
+  }
+
+  getIngredient(index: number) {
+    return this.ingredients[index];
+  }
+
+  addIngredient(ingredient: Ingredient) {
+    this.ingredients.push(ingredient);
+    this.ingredientsChanged.next(this.ingredients.slice());
+  }
+
+  addIngredients(ingredients: Ingredient[]) {
+    // for (let ingredient of ingredients) {
+    //   this.addIngredient(ingredient);
+    // }
+    this.ingredients.push(...ingredients);
+    this.ingredientsChanged.next(this.ingredients.slice());
+  }
+
+  updateIngredient(index: number, newIngredient: Ingredient) {
+    this.ingredients[index] = newIngredient;
+    this.ingredientsChanged.next(this.ingredients.slice());
+  }
+
+  deleteIngredient(index: number) {
+    this.ingredients.splice(index, 1);
+    this.ingredientsChanged.next(this.ingredients.slice());
+  }
+}
Index: 20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.ts b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.ts
new file mode 100644
--- /dev/null	(date 1707811332851)
+++ b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.ts	(date 1707811332851)
@@ -0,0 +1,35 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { Subscription } from 'rxjs';
+
+import { Ingredient } from '../shared/ingredient.model';
+import { ShoppingListService } from './shopping-list.service';
+
+@Component({
+  selector: 'app-shopping-list',
+  templateUrl: './shopping-list.component.html',
+  styleUrls: ['./shopping-list.component.css']
+})
+export class ShoppingListComponent implements OnInit, OnDestroy {
+  ingredients: Ingredient[];
+  private subscription: Subscription;
+
+  constructor(private slService: ShoppingListService) { }
+
+  ngOnInit() {
+    this.ingredients = this.slService.getIngredients();
+    this.subscription = this.slService.ingredientsChanged
+      .subscribe(
+        (ingredients: Ingredient[]) => {
+          this.ingredients = ingredients;
+        }
+      );
+  }
+
+  onEditItem(index: number) {
+    this.slService.startedEditing.next(index);
+  }
+
+  ngOnDestroy() {
+    this.subscription.unsubscribe();
+  }
+}
Index: 20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.html b/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.html
new file mode 100644
--- /dev/null	(date 1707811333266)
+++ b/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.html	(date 1707811333266)
@@ -0,0 +1,45 @@
+<div class="row">
+  <div class="col-xs-12">
+    <form (ngSubmit)="onSubmit(f)" #f="ngForm">
+      <div class="row">
+        <div class="col-sm-5 form-group">
+          <label for="name">Name</label>
+          <input
+            type="text"
+            id="name"
+            class="form-control"
+            name="name"
+            ngModel
+            required
+          >
+        </div>
+        <div class="col-sm-2 form-group">
+          <label for="amount">Amount</label>
+          <input
+            type="number"
+            id="amount"
+            class="form-control"
+            name="amount"
+            ngModel
+            required
+            pattern="^[1-9]+[0-9]*$"
+          >
+        </div>
+      </div>
+      <div class="row">
+        <div class="col-xs-12">
+          <button
+            class="btn btn-success"
+            type="submit"
+            [disabled]="!f.valid">{{ editMode ? 'Update' : 'Add' }}</button>
+          <button
+            class="btn btn-danger"
+            type="button"
+            (click)="onDelete()"
+            *ngIf="editMode">Delete</button>
+          <button class="btn btn-primary" type="button" (click)="onClear()">Clear</button>
+        </div>
+      </div>
+    </form>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/test.ts b/20.-auth-01-auth-component/src/test.ts
new file mode 100644
--- /dev/null	(date 1707811331315)
+++ b/20.-auth-01-auth-component/src/test.ts	(date 1707811331315)
@@ -0,0 +1,20 @@
+// This file is required by karma.conf.js and loads recursively all the .spec and framework files
+
+import 'zone.js/dist/zone-testing';
+import { getTestBed } from '@angular/core/testing';
+import {
+  BrowserDynamicTestingModule,
+  platformBrowserDynamicTesting
+} from '@angular/platform-browser-dynamic/testing';
+
+declare const require: any;
+
+// First, initialize the Angular testing environment.
+getTestBed().initTestEnvironment(
+  BrowserDynamicTestingModule,
+  platformBrowserDynamicTesting()
+);
+// Then we find all the tests.
+const context = require.context('./', true, /\.spec\.ts$/);
+// And load the modules.
+context.keys().map(context);
Index: 20.-auth-01-auth-component/src/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/index.html b/20.-auth-01-auth-component/src/index.html
new file mode 100644
--- /dev/null	(date 1707811330937)
+++ b/20.-auth-01-auth-component/src/index.html	(date 1707811330937)
@@ -0,0 +1,14 @@
+<!doctype html>
+<html lang="en">
+<head>
+  <meta charset="utf-8">
+  <title>Angular - The Complete Guide</title>
+  <base href="/">
+
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <link rel="icon" type="image/x-icon" href="favicon.ico">
+</head>
+<body>
+  <app-root></app-root>
+</body>
+</html>
Index: 20.-auth-01-auth-component/src/main.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/main.ts b/20.-auth-01-auth-component/src/main.ts
new file mode 100644
--- /dev/null	(date 1707811331024)
+++ b/20.-auth-01-auth-component/src/main.ts	(date 1707811331024)
@@ -0,0 +1,12 @@
+import { enableProdMode } from '@angular/core';
+import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
+
+import { AppModule } from './app/app.module';
+import { environment } from './environments/environment';
+
+if (environment.production) {
+  enableProdMode();
+}
+
+platformBrowserDynamic().bootstrapModule(AppModule)
+  .catch(err => console.error(err));
Index: 20.-auth-01-auth-component/src/app/app.component.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/app.component.spec.ts b/20.-auth-01-auth-component/src/app/app.component.spec.ts
new file mode 100644
--- /dev/null	(date 1707811332030)
+++ b/20.-auth-01-auth-component/src/app/app.component.spec.ts	(date 1707811332030)
@@ -0,0 +1,32 @@
+import { TestBed, async } from '@angular/core/testing';
+import { AppComponent } from './app.component';
+
+describe('AppComponent', () => {
+  beforeEach(() => {
+    TestBed.configureTestingModule({
+      declarations: [
+        AppComponent
+      ],
+    });
+    TestBed.compileComponents();
+  });
+
+  it('should create the app', async(() => {
+    const fixture = TestBed.createComponent(AppComponent);
+    const app = fixture.debugElement.componentInstance;
+    expect(app).toBeTruthy();
+  }));
+
+  it(`should have as title 'app works!'`, async(() => {
+    const fixture = TestBed.createComponent(AppComponent);
+    const app = fixture.debugElement.componentInstance;
+    expect(app.title).toEqual('app works!');
+  }));
+
+  it('should render title in a h1 tag', async(() => {
+    const fixture = TestBed.createComponent(AppComponent);
+    fixture.detectChanges();
+    const compiled = fixture.debugElement.nativeElement;
+    expect(compiled.querySelector('h1').textContent).toContain('app works!');
+  }));
+});
Index: 20.-auth-01-auth-component/src/app/app.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/app.component.html b/20.-auth-01-auth-component/src/app/app.component.html
new file mode 100644
--- /dev/null	(date 1707811331871)
+++ b/20.-auth-01-auth-component/src/app/app.component.html	(date 1707811331871)
@@ -0,0 +1,8 @@
+<app-header (featureSelected)="onNavigate($event)"></app-header>
+<div class="container">
+  <div class="row">
+    <div class="col-md-12">
+      <router-outlet></router-outlet>
+    </div>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/app/app-routing.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/app-routing.module.ts b/20.-auth-01-auth-component/src/app/app-routing.module.ts
new file mode 100644
--- /dev/null	(date 1707811331951)
+++ b/20.-auth-01-auth-component/src/app/app-routing.module.ts	(date 1707811331951)
@@ -0,0 +1,40 @@
+import { NgModule } from '@angular/core';
+import { Routes, RouterModule } from '@angular/router';
+
+import { RecipesComponent } from './recipes/recipes.component';
+import { ShoppingListComponent } from './shopping-list/shopping-list.component';
+import { RecipeStartComponent } from './recipes/recipe-start/recipe-start.component';
+import { RecipeDetailComponent } from './recipes/recipe-detail/recipe-detail.component';
+import { RecipeEditComponent } from './recipes/recipe-edit/recipe-edit.component';
+import { RecipesResolverService } from './recipes/recipes-resolver.service';
+import { AuthComponent } from './auth/auth.component';
+
+const appRoutes: Routes = [
+  { path: '', redirectTo: '/recipes', pathMatch: 'full' },
+  {
+    path: 'recipes',
+    component: RecipesComponent,
+    children: [
+      { path: '', component: RecipeStartComponent },
+      { path: 'new', component: RecipeEditComponent },
+      {
+        path: ':id',
+        component: RecipeDetailComponent,
+        resolve: [RecipesResolverService]
+      },
+      {
+        path: ':id/edit',
+        component: RecipeEditComponent,
+        resolve: [RecipesResolverService]
+      }
+    ]
+  },
+  { path: 'shopping-list', component: ShoppingListComponent },
+  { path: 'auth', component: AuthComponent }
+];
+
+@NgModule({
+  imports: [RouterModule.forRoot(appRoutes)],
+  exports: [RouterModule]
+})
+export class AppRoutingModule {}
Index: 20.-auth-01-auth-component/src/environments/environment.prod.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/environments/environment.prod.ts b/20.-auth-01-auth-component/src/environments/environment.prod.ts
new file mode 100644
--- /dev/null	(date 1707811335545)
+++ b/20.-auth-01-auth-component/src/environments/environment.prod.ts	(date 1707811335545)
@@ -0,0 +1,3 @@
+export const environment = {
+  production: true
+};
Index: 20.-auth-01-auth-component/src/polyfills.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/polyfills.ts b/20.-auth-01-auth-component/src/polyfills.ts
new file mode 100644
--- /dev/null	(date 1707811331686)
+++ b/20.-auth-01-auth-component/src/polyfills.ts	(date 1707811331686)
@@ -0,0 +1,63 @@
+/**
+ * This file includes polyfills needed by Angular and is loaded before the app.
+ * You can add your own extra polyfills to this file.
+ *
+ * This file is divided into 2 sections:
+ *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
+ *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
+ *      file.
+ *
+ * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
+ * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
+ * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
+ *
+ * Learn more in https://angular.io/guide/browser-support
+ */
+
+/***************************************************************************************************
+ * BROWSER POLYFILLS
+ */
+
+/** IE10 and IE11 requires the following for NgClass support on SVG elements */
+// import 'classlist.js';  // Run `npm install --save classlist.js`.
+
+/**
+ * Web Animations `@angular/platform-browser/animations`
+ * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
+ * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
+ */
+// import 'web-animations-js';  // Run `npm install --save web-animations-js`.
+
+/**
+ * By default, zone.js will patch all possible macroTask and DomEvents
+ * user can disable parts of macroTask/DomEvents patch by setting following flags
+ * because those flags need to be set before `zone.js` being loaded, and webpack
+ * will put import in the top of bundle, so user need to create a separate file
+ * in this directory (for example: zone-flags.ts), and put the following flags
+ * into that file, and then add the following code before importing zone.js.
+ * import './zone-flags.ts';
+ *
+ * The flags allowed in zone-flags.ts are listed here.
+ *
+ * The following flags will work for all browsers.
+ *
+ * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
+ * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
+ * (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
+ *
+ *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
+ *  with the following flag, it will bypass `zone.js` patch for IE/Edge
+ *
+ *  (window as any).__Zone_enable_cross_context_check = true;
+ *
+ */
+
+/***************************************************************************************************
+ * Zone JS is required by default for Angular itself.
+ */
+import 'zone.js/dist/zone';  // Included with Angular CLI.
+
+
+/***************************************************************************************************
+ * APPLICATION IMPORTS
+ */
Index: 20.-auth-01-auth-component/src/environments/environment.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/environments/environment.ts b/20.-auth-01-auth-component/src/environments/environment.ts
new file mode 100644
--- /dev/null	(date 1707811335612)
+++ b/20.-auth-01-auth-component/src/environments/environment.ts	(date 1707811335612)
@@ -0,0 +1,16 @@
+// This file can be replaced during build by using the `fileReplacements` array.
+// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
+// The list of file replacements can be found in `angular.json`.
+
+export const environment = {
+  production: false
+};
+
+/*
+ * For easier debugging in development mode, you can import the following file
+ * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
+ *
+ * This import should be commented out in production mode because it will have a negative impact
+ * on performance if an error is thrown.
+ */
+// import 'zone.js/dist/zone-error';  // Included with Angular CLI.
Index: 20.-auth-01-auth-component/src/tslint.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/tslint.json b/20.-auth-01-auth-component/src/tslint.json
new file mode 100644
--- /dev/null	(date 1707811331450)
+++ b/20.-auth-01-auth-component/src/tslint.json	(date 1707811331450)
@@ -0,0 +1,17 @@
+{
+  "extends": "../tslint.json",
+  "rules": {
+    "directive-selector": [
+      true,
+      "attribute",
+      "app",
+      "camelCase"
+    ],
+    "component-selector": [
+      true,
+      "element",
+      "app",
+      "kebab-case"
+    ]
+  }
+}
Index: 20.-auth-01-auth-component/src/browserslist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/browserslist b/20.-auth-01-auth-component/src/browserslist
new file mode 100644
--- /dev/null	(date 1707811330759)
+++ b/20.-auth-01-auth-component/src/browserslist	(date 1707811330759)
@@ -0,0 +1,11 @@
+# This file is currently used by autoprefixer to adjust CSS to support the below specified browsers
+# For additional information regarding the format and rule options, please see:
+# https://github.com/browserslist/browserslist#queries
+#
+# For IE 9-11 support, please remove 'not' from the last line of the file and adjust as needed
+
+> 0.5%
+last 2 versions
+Firefox ESR
+not dead
+not IE 9-11
\ No newline at end of file
Index: 20.-auth-01-auth-component/src/styles.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/styles.css b/20.-auth-01-auth-component/src/styles.css
new file mode 100644
--- /dev/null	(date 1707811331226)
+++ b/20.-auth-01-auth-component/src/styles.css	(date 1707811331226)
@@ -0,0 +1,1 @@
+/* You can add global styles to this file, and also import other style files */
Index: 20.-auth-01-auth-component/src/tsconfig.spec.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/tsconfig.spec.json b/20.-auth-01-auth-component/src/tsconfig.spec.json
new file mode 100644
--- /dev/null	(date 1707811331779)
+++ b/20.-auth-01-auth-component/src/tsconfig.spec.json	(date 1707811331779)
@@ -0,0 +1,18 @@
+{
+  "extends": "../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "../out-tsc/spec",
+    "types": [
+      "jasmine",
+      "node"
+    ]
+  },
+  "files": [
+    "test.ts",
+    "polyfills.ts"
+  ],
+  "include": [
+    "**/*.spec.ts",
+    "**/*.d.ts"
+  ]
+}
Index: 20.-auth-01-auth-component/src/karma.conf.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/karma.conf.js b/20.-auth-01-auth-component/src/karma.conf.js
new file mode 100644
--- /dev/null	(date 1707811331603)
+++ b/20.-auth-01-auth-component/src/karma.conf.js	(date 1707811331603)
@@ -0,0 +1,32 @@
+// Karma configuration file, see link for more information
+// https://karma-runner.github.io/1.0/config/configuration-file.html
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage-istanbul-reporter'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      clearContext: false // leave Jasmine Spec Runner output visible in browser
+    },
+    coverageIstanbulReporter: {
+      dir: require('path').join(__dirname, '../coverage/ng-complete-guide-update'),
+      reports: ['html', 'lcovonly', 'text-summary'],
+      fixWebpackSourcePaths: true
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: config.LOG_INFO,
+    autoWatch: true,
+    browsers: ['Chrome'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
Index: 20.-auth-01-auth-component/src/tsconfig.app.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/tsconfig.app.json b/20.-auth-01-auth-component/src/tsconfig.app.json
new file mode 100644
--- /dev/null	(date 1707811331122)
+++ b/20.-auth-01-auth-component/src/tsconfig.app.json	(date 1707811331122)
@@ -0,0 +1,11 @@
+{
+  "extends": "../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "../out-tsc/app",
+    "types": []
+  },
+  "exclude": [
+    "test.ts",
+    "**/*.spec.ts"
+  ]
+}
Index: 20.-auth-01-auth-component/src/app/shared/ingredient.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shared/ingredient.model.ts b/20.-auth-01-auth-component/src/app/shared/ingredient.model.ts
new file mode 100644
--- /dev/null	(date 1707811332606)
+++ b/20.-auth-01-auth-component/src/app/shared/ingredient.model.ts	(date 1707811332606)
@@ -0,0 +1,3 @@
+export class Ingredient {
+  constructor(public name: string, public amount: number) {}
+}
Index: 20.-auth-01-auth-component/src/app/shared/dropdown.directive.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shared/dropdown.directive.ts b/20.-auth-01-auth-component/src/app/shared/dropdown.directive.ts
new file mode 100644
--- /dev/null	(date 1707811332766)
+++ b/20.-auth-01-auth-component/src/app/shared/dropdown.directive.ts	(date 1707811332766)
@@ -0,0 +1,12 @@
+import { Directive, HostListener, HostBinding } from '@angular/core';
+
+@Directive({
+  selector: '[appDropdown]'
+})
+export class DropdownDirective {
+  @HostBinding('class.open') isOpen = false;
+
+  @HostListener('click') toggleOpen() {
+    this.isOpen = !this.isOpen;
+  }
+}
Index: 20.-auth-01-auth-component/src/app/header/header.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/header/header.component.html b/20.-auth-01-auth-component/src/app/header/header.component.html
new file mode 100644
--- /dev/null	(date 1707811335395)
+++ b/20.-auth-01-auth-component/src/app/header/header.component.html	(date 1707811335395)
@@ -0,0 +1,34 @@
+<nav class="navbar navbar-default">
+  <div class="container-fluid">
+    <div class="navbar-header">
+      <a routerLink="/" class="navbar-brand">Recipe Book</a>
+    </div>
+
+    <div class="collapse navbar-collapse">
+      <ul class="nav navbar-nav">
+        <li routerLinkActive="active"><a routerLink="/recipes">Recipes</a></li>
+        <li routerLinkActive="active">
+          <a routerLink="/auth">Authenticate</a>
+        </li>
+        <li routerLinkActive="active">
+          <a routerLink="/shopping-list">Shopping List</a>
+        </li>
+      </ul>
+      <ul class="nav navbar-nav navbar-right">
+        <li class="dropdown" appDropdown>
+          <a style="cursor: pointer;" class="dropdown-toggle" role="button"
+            >Manage <span class="caret"></span
+          ></a>
+          <ul class="dropdown-menu">
+            <li>
+              <a style="cursor: pointer;" (click)="onSaveData()">Save Data</a>
+            </li>
+            <li>
+              <a style="cursor: pointer;" (click)="onFetchData()">Fetch Data</a>
+            </li>
+          </ul>
+        </li>
+      </ul>
+    </div>
+  </div>
+</nav>
Index: 20.-auth-01-auth-component/src/app/header/header.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/header/header.component.ts b/20.-auth-01-auth-component/src/app/header/header.component.ts
new file mode 100644
--- /dev/null	(date 1707811335464)
+++ b/20.-auth-01-auth-component/src/app/header/header.component.ts	(date 1707811335464)
@@ -0,0 +1,19 @@
+import { Component } from '@angular/core';
+
+import { DataStorageService } from '../shared/data-storage.service';
+
+@Component({
+  selector: 'app-header',
+  templateUrl: './header.component.html'
+})
+export class HeaderComponent {
+  constructor(private dataStorageService: DataStorageService) {}
+
+  onSaveData() {
+    this.dataStorageService.storeRecipes();
+  }
+
+  onFetchData() {
+    this.dataStorageService.fetchRecipes().subscribe();
+  }
+}
Index: 20.-auth-01-auth-component/src/app/auth/auth.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/auth/auth.component.ts b/20.-auth-01-auth-component/src/app/auth/auth.component.ts
new file mode 100644
--- /dev/null	(date 1707811332388)
+++ b/20.-auth-01-auth-component/src/app/auth/auth.component.ts	(date 1707811332388)
@@ -0,0 +1,7 @@
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'app-auth',
+  templateUrl: './auth.component.html'
+})
+export class AuthComponent {}
Index: 20.-auth-01-auth-component/src/app/auth/auth.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/auth/auth.component.html b/20.-auth-01-auth-component/src/app/auth/auth.component.html
new file mode 100644
--- /dev/null	(date 1707811332505)
+++ b/20.-auth-01-auth-component/src/app/auth/auth.component.html	(date 1707811332505)
@@ -0,0 +1,18 @@
+<div class="row">
+  <div class="col-xs-12 col-md-6 col-md-offset-3">
+    <form>
+      <div class="form-group">
+        <label for="email">E-Mail</label>
+        <input type="email" id="email" class="form-control" />
+      </div>
+      <div class="form-group">
+        <label for="password">Password</label>
+        <input type="password" id="password" class="form-control" />
+      </div>
+      <div>
+        <button class="btn btn-primary">Sign Up</button> |
+        <button class="btn btn-primary">Switch to Login</button>
+      </div>
+    </form>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.css b/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.css
new file mode 100644
--- /dev/null	(date 1707811334419)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.css	(date 1707811334419)
@@ -0,0 +1,4 @@
+input.ng-invalid.ng-touched,
+textarea.ng-invalid.ng-touched {
+  border: 1px solid red;
+}
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.html b/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.html
new file mode 100644
--- /dev/null	(date 1707811334302)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.html	(date 1707811334302)
@@ -0,0 +1,95 @@
+<div class="row">
+  <div class="col-xs-12">
+    <form [formGroup]="recipeForm" (ngSubmit)="onSubmit()">
+      <div class="row">
+        <div class="col-xs-12">
+          <button
+            type="submit"
+            class="btn btn-success"
+            [disabled]="!recipeForm.valid">Save</button>
+          <button type="button" class="btn btn-danger" (click)="onCancel()">Cancel</button>
+        </div>
+      </div>
+      <div class="row">
+        <div class="col-xs-12">
+          <div class="form-group">
+            <label for="name">Name</label>
+            <input
+              type="text"
+              id="name"
+              formControlName="name"
+              class="form-control">
+          </div>
+        </div>
+      </div>
+      <div class="row">
+        <div class="col-xs-12">
+          <div class="form-group">
+            <label for="imagePath">Image URL</label>
+            <input
+              type="text"
+              id="imagePath"
+              formControlName="imagePath"
+              class="form-control"
+              #imagePath>
+          </div>
+        </div>
+      </div>
+      <div class="row">
+        <div class="col-xs-12">
+          <img [src]="imagePath.value" class="img-responsive">
+        </div>
+      </div>
+      <div class="row">
+        <div class="col-xs-12">
+          <div class="form-group">
+            <label for="description">Description</label>
+            <textarea
+              type="text"
+              id="description"
+              class="form-control"
+              formControlName="description"
+              rows="6"></textarea>
+          </div>
+        </div>
+      </div>
+      <div class="row">
+        <div class="col-xs-12" formArrayName="ingredients">
+          <div
+            class="row"
+            *ngFor="let ingredientCtrl of recipeForm.get('ingredients').controls; let i = index"
+            [formGroupName]="i"
+            style="margin-top: 10px;">
+            <div class="col-xs-8">
+              <input
+                type="text"
+                class="form-control"
+                formControlName="name">
+            </div>
+            <div class="col-xs-2">
+              <input
+                type="number"
+                class="form-control"
+                formControlName="amount">
+            </div>
+            <div class="col-xs-2">
+              <button
+                type="button"
+                class="btn btn-danger"
+                (click)="onDeleteIngredient(i)">X</button>
+            </div>
+          </div>
+          <hr>
+          <div class="row">
+            <div class="col-xs-12">
+              <button
+                type="button"
+                class="btn btn-success"
+                (click)="onAddIngredient()">Add Ingredient</button>
+            </div>
+          </div>
+        </div>
+      </div>
+    </form>
+  </div>
+</div>
Index: 20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.ts b/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.ts
new file mode 100644
--- /dev/null	(date 1707811334492)
+++ b/20.-auth-01-auth-component/src/app/recipes/recipe-edit/recipe-edit.component.ts	(date 1707811334492)
@@ -0,0 +1,98 @@
+import { Component, OnInit } from '@angular/core';
+import { ActivatedRoute, Params, Router } from '@angular/router';
+import { FormGroup, FormControl, FormArray, Validators } from '@angular/forms';
+
+import { RecipeService } from '../recipe.service';
+
+@Component({
+  selector: 'app-recipe-edit',
+  templateUrl: './recipe-edit.component.html',
+  styleUrls: ['./recipe-edit.component.css']
+})
+export class RecipeEditComponent implements OnInit {
+  id: number;
+  editMode = false;
+  recipeForm: FormGroup;
+
+  constructor(
+    private route: ActivatedRoute,
+    private recipeService: RecipeService,
+    private router: Router
+  ) {}
+
+  ngOnInit() {
+    this.route.params.subscribe((params: Params) => {
+      this.id = +params['id'];
+      this.editMode = params['id'] != null;
+      this.initForm();
+    });
+  }
+
+  onSubmit() {
+    // const newRecipe = new Recipe(
+    //   this.recipeForm.value['name'],
+    //   this.recipeForm.value['description'],
+    //   this.recipeForm.value['imagePath'],
+    //   this.recipeForm.value['ingredients']);
+    if (this.editMode) {
+      this.recipeService.updateRecipe(this.id, this.recipeForm.value);
+    } else {
+      this.recipeService.addRecipe(this.recipeForm.value);
+    }
+    this.onCancel();
+  }
+
+  onAddIngredient() {
+    (<FormArray>this.recipeForm.get('ingredients')).push(
+      new FormGroup({
+        name: new FormControl(null, Validators.required),
+        amount: new FormControl(null, [
+          Validators.required,
+          Validators.pattern(/^[1-9]+[0-9]*$/)
+        ])
+      })
+    );
+  }
+
+  onDeleteIngredient(index: number) {
+    (<FormArray>this.recipeForm.get('ingredients')).removeAt(index);
+  }
+
+  onCancel() {
+    this.router.navigate(['../'], { relativeTo: this.route });
+  }
+
+  private initForm() {
+    let recipeName = '';
+    let recipeImagePath = '';
+    let recipeDescription = '';
+    let recipeIngredients = new FormArray([]);
+
+    if (this.editMode) {
+      const recipe = this.recipeService.getRecipe(this.id);
+      recipeName = recipe.name;
+      recipeImagePath = recipe.imagePath;
+      recipeDescription = recipe.description;
+      if (recipe['ingredients']) {
+        for (let ingredient of recipe.ingredients) {
+          recipeIngredients.push(
+            new FormGroup({
+              name: new FormControl(ingredient.name, Validators.required),
+              amount: new FormControl(ingredient.amount, [
+                Validators.required,
+                Validators.pattern(/^[1-9]+[0-9]*$/)
+              ])
+            })
+          );
+        }
+      }
+    }
+
+    this.recipeForm = new FormGroup({
+      name: new FormControl(recipeName, Validators.required),
+      imagePath: new FormControl(recipeImagePath, Validators.required),
+      description: new FormControl(recipeDescription, Validators.required),
+      ingredients: recipeIngredients
+    });
+  }
+}
Index: 20.-auth-01-auth-component/src/app/shared/data-storage.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/20.-auth-01-auth-component/src/app/shared/data-storage.service.ts b/20.-auth-01-auth-component/src/app/shared/data-storage.service.ts
new file mode 100644
--- /dev/null	(date 1707811332688)
+++ b/20.-auth-01-auth-component/src/app/shared/data-storage.service.ts	(date 1707811332688)
@@ -0,0 +1,43 @@
+import { Injectable } from '@angular/core';
+import { HttpClient } from '@angular/common/http';
+import { map, tap } from 'rxjs/operators';
+
+import { Recipe } from '../recipes/recipe.model';
+import { RecipeService } from '../recipes/recipe.service';
+
+@Injectable({ providedIn: 'root' })
+export class DataStorageService {
+  constructor(private http: HttpClient, private recipeService: RecipeService) {}
+
+  storeRecipes() {
+    const recipes = this.recipeService.getRecipes();
+    this.http
+      .put(
+        'https://ng-course-recipe-book-65f10.firebaseio.com/recipes.json',
+        recipes
+      )
+      .subscribe(response => {
+        console.log(response);
+      });
+  }
+
+  fetchRecipes() {
+    return this.http
+      .get<Recipe[]>(
+        'https://ng-course-recipe-book-65f10.firebaseio.com/recipes.json'
+      )
+      .pipe(
+        map(recipes => {
+          return recipes.map(recipe => {
+            return {
+              ...recipe,
+              ingredients: recipe.ingredients ? recipe.ingredients : []
+            };
+          });
+        }),
+        tap(recipes => {
+          this.recipeService.setRecipes(recipes);
+        })
+      )
+  }
+}
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.css b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-list.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.css b/20.-auth-01-auth-component/src/app/recipes/recipe-list/recipe-item/recipe-item.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.css b/20.-auth-01-auth-component/src/app/recipes/recipe-detail/recipe-detail.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.css b/20.-auth-01-auth-component/src/app/recipes/recipe-start/recipe-start.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/recipes/recipes.component.css b/20.-auth-01-auth-component/src/app/recipes/recipes.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/app.component.css b/20.-auth-01-auth-component/src/app/app.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.css b/20.-auth-01-auth-component/src/app/shopping-list/shopping-list.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.css b/20.-auth-01-auth-component/src/app/shopping-list/shopping-edit/shopping-edit.component.css
new file mode 100644
diff --git a/20.-auth-01-auth-component/src/assets/.gitkeep b/20.-auth-01-auth-component/src/assets/.gitkeep
new file mode 100644
